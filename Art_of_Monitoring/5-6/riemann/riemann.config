(logging/init {:file "/var/log/riemann/riemann.log"})

(require 'riemann.client)
(require '[examplecom.etc.email :refer :all])
(require '[examplecom.etc.graphite :refer :all])
(require '[examplecom.etc.collectd :refer :all])

(let [host "0.0.0.0"]
  (repl-server {:host "127.0.0.1"})
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

(periodically-expire 10 {:keep-keys [:host :service :tags, :state, :description, :metric]})

(let [index (index)
      downstream (batch 100 1/10
        (async-queue! :agg { :queue-size     1e3
                             :core-pool-size 4
                             :max-pool-size  32}
          (forward
            (riemann.client/tcp-client :host "riemannmc"))))]

  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      (where (not (tagged "notification"))
        index)

      (tagged "collectd"
        (smap rewrite-service graph)

        (tagged "notification"
          (changed-state {:init "ok"}
            (adjust [:service clojure.string/replace #"^processes-(.*)\/ps_count$" "$1"]
              (email "james@example.com"))))

         (where (and (expired? event)
                     (service #"^processes-.+\/ps_count\/processes"))
           (adjust [:service clojure.string/replace #"^processes-(.*)\/ps_count\/processes$" "$1"]
             (email "james@example.com"))))

      (where (service #"^riemann.*")
        graph

        downstream))))
